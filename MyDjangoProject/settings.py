"""
Django settings for MyDjangoProject project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z#4i!w%xwotw5&$o#8z*@m&uw=z*gd2kf5n$odmsn!4r(i*$i-'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False   # False必须指定ALLOWED_HOSTS访问
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']
# ALLOWED_HOSTS = []

# Django-Debug-Toolbar相关的配置
INTERNAL_IPS = "127.0.0.1"
DEBUG_TOOLBAR_PANELS = [
    # 代表是哪个django版本
    # 'debug_toolbar.panels.versions.VersionsPanel',
    # 用来计时的，判断加载当前页面总共花的时间
    'debug_toolbar.panels.timer.TimerPanel',
    # # 读取django中的配置信息
    # 'debug_toolbar.panels.settings.SettingsPanel',
    # # 看到当前请求头和响应头信息
    # 'debug_toolbar.panels.headers.HeadersPanel',
    # # 当前请求的想信息（视图函数，Cookie信息，Session信息等）
    # 'debug_toolbar.panels.request.RequestPanel',
    # 查看SQL语句
    'debug_toolbar.panels.sql.SQLPanel',
    # # 静态文件
    # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    # # 模板文件
    # 'debug_toolbar.panels.templates.TemplatesPanel',
    # # 缓存
    # 'debug_toolbar.panels.cache.CachePanel',
    # # 信号
    # 'debug_toolbar.panels.signals.SignalsPanel',
    # # 日志
    # 'debug_toolbar.panels.logging.LoggingPanel',
    # # 重定向
    # 'debug_toolbar.panels.redirects.RedirectsPanel',
]

DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL': ''
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'apps.my_auth',
    'apps.cms',
    'apps.ueditor',
    'rest_framework',
    "debug_toolbar",

    "apps.goods",
    "apps.cart",

    'corsheaders',
]
# SITE_ID = 1

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',    # 跨域中间件
]

ROOT_URLCONF = 'MyDjangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'front/templates')]
        # 'DIRS': [BASE_DIR, 'front/templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':[
                'django.templatetags.static'
            ]
        },
    },
]

WSGI_APPLICATION = 'MyDjangoProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "mydjangoproject",
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'test',
        'PASSWORD': '1234'
    }
}

# 缓存
CACHES = {
    "default": { # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # "session": { # session
    #     "BACKEND": "django_redis.cache.RedisCache",
    #     "LOCATION": "redis://127.0.0.1:6379/1",
    #     "OPTIONS": {
    #         "CLIENT_CLASS": "django_redis.client.DefaultClient",
    #     }
    # },
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTH_USER_MODEL = 'my_auth.User'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'front', 'dist')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

QINIU_BUCKET_NAME = 'shisanspace'
QINIU_ACCESS_KEY = '7nzFa488WFBr6QMbnz3PjqZ9ZPbrwJtx2jy8eTZJ'
QINIU_SECRET_KEY = 'vrkQSu_sSgVo_1lpK1iDI1EaMRH6925_-m2hEanb'
QINIU_DOMAIN = 'http://r9nruh1se.hd-bkt.clouddn.com/'

UEDITOR_UPLOAD_TO_SERVER = True
UEDITOR_UPLOAD_PATH = MEDIA_ROOT
UEDITOR_CONFIG_PATH = os.path.join(BASE_DIR,'front','dist','ueditor','config.json')

# 七牛和自己的服务器，最少要配置一个
# UEditor配置
UEDITOR_UPLOAD_TO_QINIU = True
UEDITOR_QINIU_ACCESS_KEY = QINIU_ACCESS_KEY
UEDITOR_QINIU_SECRET_KEY = QINIU_SECRET_KEY
UEDITOR_QINIU_BUCKET_NAME = QINIU_BUCKET_NAME
UEDITOR_QINIU_DOMAIN = QINIU_DOMAIN

# 一次加载多少篇文章
ONE_PAGE_NEWS_COUNT = 2

# 百度云的配置
# 控制台->用户中心->用户ID
BAIDU_CLOUD_USER_ID = '614502f0d66a46f1a1afc614062b15b7'
# 音视频处理MCP->全局配置->加密配置->UserKey
BAIDU_CLOUD_USER_KEY = '96f6fc6abd7a4e0e'

# 支付宝支付相关配置
import os

ALIPAY_SETTING = {
    'ALIPAY_APP_ID': "2021000119658750",  # 应用ID(上线之后需要改成，真实应用的appid)
    'APLIPAY_APP_NOTIFY_URL': None,  # 应用回调地址[支付成功以后,支付宝返回结果到哪一个地址下面] 一般这里不写，用下面的回调网址即可
    'ALIPAY_DEBUG': False,
    # APIPAY_GATEWAY="https://openapi.alipay.com/gateway.do"   # 真实网关
    'APIPAY_GATEWAY': "https://openapi.alipaydev.com/gateway.do",  # 沙盒环境的网关(上线需要进行修改)
    # 'ALIPAY_RETURN_URL': "http://127.0.0.1:8000/payinfo/check_html_view/",  # 同步回调网址--用于前端,支付成功之后回调
    'ALIPAY_RETURN_URL': "http://127.0.0.1:8000/cart/check_html_view/",
    'ALIPAY_NOTIFY_URL': "http://127.0.0.1:8000/cart/check_html_view/",  # 异步回调网址---后端使用，post请求，网站未上线，post无法接收到响应内容，付成功之后回调
    'APP_PRIVATE_KEY_STRING': os.path.join(BASE_DIR, 'file/应用私钥2048.txt'),  # 自己生成的私钥，这个就是路径拼接，配置好了，试试能不能点进去
    # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,********
    'ALIPAY_PUBLIC_KEY_STRING': os.path.join(BASE_DIR, 'file/alipay_public.txt'),  # 一定要注意，是支付宝给你的公钥，不是你自己生成的那个
    'SIGN_TYPE': "RSA2",  # RSA 或者 RSA2  现在基本上都是用RSA2
}